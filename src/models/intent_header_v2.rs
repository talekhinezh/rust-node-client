/*
 * Radix Core API
 *
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node's function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node's current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects. 
 *
 * The version of the OpenAPI document: v1.2.3
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// IntentHeaderV2 : The metadata common to both transaction intents and subintents.  The `min_proposer_timestamp_inclusive` and `max_proposer_timestamp_exclusive` are both optional. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntentHeaderV2 {
    /// The logical id of the network
    #[serde(rename = "network_id")]
    pub network_id: i32,
    /// An integer between `0` and `10^10`, marking the epoch from which the transaction can be submitted. In the case of uncommitted transactions, a value of `10^10` indicates that the epoch was >= `10^10`. 
    #[serde(rename = "start_epoch_inclusive")]
    pub start_epoch_inclusive: i64,
    /// An integer between `0` and `10^10`, marking the epoch from which the transaction will no longer be valid, and be rejected. In the case of uncommitted transactions, a value of `10^10` indicates that the epoch was >= `10^10`. 
    #[serde(rename = "end_epoch_exclusive")]
    pub end_epoch_exclusive: i64,
    #[serde(rename = "min_proposer_timestamp_inclusive", skip_serializing_if = "Option::is_none")]
    pub min_proposer_timestamp_inclusive: Option<Box<models::ScryptoInstant>>,
    #[serde(rename = "max_proposer_timestamp_exclusive", skip_serializing_if = "Option::is_none")]
    pub max_proposer_timestamp_exclusive: Option<Box<models::ScryptoInstant>>,
    /// The string representation of an integer between `0` and `2^64 - 1`, which can be chosen to ensure that a unique intent can be created. It only needs to be unique for a particular intent content and epoch/timestamp, and can be safely selected randomly to very high probability.  This field was called `nonce` in the V1 models, but was a misleading name, as it got confused with a cryptographic nonce or an Ethereum-style nonce, and it is neither. 
    #[serde(rename = "intent_discriminator")]
    pub intent_discriminator: String,
}

impl IntentHeaderV2 {
    /// The metadata common to both transaction intents and subintents.  The `min_proposer_timestamp_inclusive` and `max_proposer_timestamp_exclusive` are both optional. 
    pub fn new(network_id: i32, start_epoch_inclusive: i64, end_epoch_exclusive: i64, intent_discriminator: String) -> IntentHeaderV2 {
        IntentHeaderV2 {
            network_id,
            start_epoch_inclusive,
            end_epoch_exclusive,
            min_proposer_timestamp_inclusive: None,
            max_proposer_timestamp_exclusive: None,
            intent_discriminator,
        }
    }
}

